Q2. Maximum Frequency stack
Problem Description
You are given a matrix A of size N x 2 which represents different operations.
Assume initially you have a stack-like data structure you have to perform operations on it.

Operations are of two types:

1 x: push an integer x onto the stack and return -1.

2 0: remove and return the most frequent element in the stack. This basically means the element which has the highest count among all the elements currently in the stack.

If there is a tie for the most frequent element, the element closest to the top of the stack is removed and returned.

A[i][0] describes the type of operation to be performed. A[i][1] describe the element x or 0 corresponding to the operation performed.
Example Input
Input 1:

A = [
            [1, 5]
            [1, 7]
            [1, 5]
            [1, 7]
            [1, 4]
            [1, 5]
            [2, 0]
            [2, 0]
            [2, 0]
            [2, 0]  ]


Example Output
Output 1: [-1, -1, -1, -1, -1, -1, 5, 7, 5, 4]
Solution:

class Solution:
    # @param A : list of list of integers
    # @return a list of integers
    def solve(self, A):
        res=[]
        freq_map={}
        cnt={}
        max_cnt=0
        for i in range(len(A)):
            if A[i][1]!=0:
                res.append(-1)
                valcnt=1+cnt.get(A[i][1],0)
                cnt[A[i][1]]=valcnt
                if valcnt>max_cnt:
                    max_cnt=valcnt
                    freq_map[valcnt]=[]
                freq_map[valcnt].append(A[i][1])
            
            else:
                res1=freq_map[max_cnt].pop()
                if not freq_map[max_cnt]:
                    max_cnt-=1
                cnt[res1]-=1
                res.append(res1)
        return res


        
        
